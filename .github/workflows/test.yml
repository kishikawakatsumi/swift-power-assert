name: Test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  DEVELOPER_DIR: /Applications/Xcode_14.3.app
  FONTAWESOME_TOKEN: ${{ secrets.FONTAWESOME_TOKEN }}

jobs:
  test:
    runs-on: macos-13
    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v4
      - name: Swift Version
        id: swift-version
        run: echo "SWIFT_VERSION=$(cat .swift-version)" >> "$GITHUB_OUTPUT"
      - name: Install Swift
        uses: slashmo/install-swift@v0.4.0
        with:
          version: ${{ steps.swift-version.outputs.SWIFT_VERSION }}
      - name: Build
        run: |
          export TOOLCHAINS=swift
          swift -version
          swift build
      - name: Run tests
        run: |
          swift -version
          swift test -Xswiftc -Xfrontend -Xswiftc -dump-macro-expansions --enable-code-coverage
      - name: Gather code coverage
        run: |
          BUILD_PATH=$(swift build --show-bin-path)
          xcrun llvm-cov report \
            $BUILD_PATH/SwiftPowerAssertPackageTests.xctest/Contents/MacOS/SwiftPowerAssertPackageTests \
            -instr-profile=$BUILD_PATH/codecov/default.profdata \
            -ignore-filename-regex=".build|Tests" -use-color
          xcrun llvm-cov export -format="lcov" \
            $BUILD_PATH/SwiftPowerAssertPackageTests.xctest/Contents/MacOS/SwiftPowerAssertPackageTests \
            -instr-profile=$BUILD_PATH/codecov/default.profdata \
            -ignore-filename-regex=".build|Tests" > coverage_report.lcov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: fail
          files: ./coverage_report.lcov
          verbose: true
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v4
      - name: Build Playground
        run: |
          set -ex
          cd ./Playground
          tar -czh . | docker build - --build-arg FONTAWESOME_TOKEN=${{ env.FONTAWESOME_TOKEN }}
